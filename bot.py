import logging
import os
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, filters, ChatMemberHandler
)
from datetime import timezone

BOT_TOKEN = '7830971549:AAGXNX5EBtMX76Q-hInKHTZdu8a2qZTIeeY'

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
DATA_FILE = 'registered_chats.json'

# –°–ø–∏—Å–æ–∫ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö @username –≤ –¢–µ–ª–µ–≥—Ä–∞–º
ALLOWED_USERNAMES = {  'fullpaketstrada', 'SpammBotss' }

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤
if os.path.exists(DATA_FILE):
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        registered_chats = set(tuple(chat) for chat in json.load(f))
else:
    registered_chats = set()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Å–æ—Å—Ç–æ—è–Ω–∏—è, –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ —Ç.–ø.)
user_data = {}

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
scheduled_jobs = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != 'private':
        return

    user_id = update.effective_user.id
    username = update.effective_user.username  # @username –±–µ–∑ @
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID: {user_id}, username: @{username}")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ @username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö
    if username not in ALLOWED_USERNAMES:
        # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–µ–º–µ—Ü–∫–æ–º
        await update.message.reply_text(
            "Hallo, m√∂chtest du auch so einen Bot? "
            "Schreib mir @SpammBotss, du kannst ihn einen Tag lang kostenlos ausprobieren."
        )
        return

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard = [
        [
            InlineKeyboardButton("üìÇ Chats ansehen", callback_data='view_chats'),
            InlineKeyboardButton("üì§ Nachricht senden", callback_data='send_message'),
        ],
        [
            InlineKeyboardButton("üõë Verteilung stoppen", callback_data='stop_broadcast'),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üìã W√§hlen Sie eine Aktion:",
        reply_markup=reply_markup
    )


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_chat.type != 'private':
        return

    user_id = update.effective_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –∫–æ–º–∞–Ω–¥—É /help.")

    await update.message.reply_text(
        "‚ÑπÔ∏è Dieser Bot erm√∂glicht das Senden von Nachrichten üì§ in alle Chats, in denen er hinzugef√ºgt wurde. üìÇ\n\n"
        "üîß Verf√ºgbare Befehle:\n"
        "/start - Starten Sie die Arbeit mit dem Bot üöÄ\n"
        "/help - Zeigen Sie diese Nachricht an ‚ùì\n"
        "/stop - Stoppen Sie die aktuelle Verteilung üõë"
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: {query.data}")

    if query.data == 'view_chats':
        if registered_chats:
            chat_list = '\n'.join([f"{chat_title} ({chat_id})" for chat_id, chat_title in registered_chats])
            await query.message.reply_text(f"üìÇ Der Bot ist in folgenden Chats hinzugef√ºgt:\n{chat_list}")
        else:
            await query.message.reply_text("üö´ Der Bot ist in keinem Chat hinzugef√ºgt.")
    elif query.data == 'send_message':
        user_data[user_id] = {'state': 'awaiting_interval'}
        await query.message.reply_text("‚è∞ Bitte geben Sie das Intervall in Minuten f√ºr das Senden der Nachricht ein.")
    elif query.data == 'stop_broadcast':
        if user_id in scheduled_jobs:
            job = scheduled_jobs[user_id]
            job.schedule_removal()
            del scheduled_jobs[user_id]
            await query.message.reply_text("üõë Die Verteilung wurde gestoppt.")
        else:
            await query.message.reply_text("‚ùå Keine aktive Verteilung.")


async def receive_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")

    if user_id in user_data:
        state = user_data[user_id].get('state')
        if state == 'awaiting_interval':
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
            try:
                interval = int(update.message.text)
                if interval <= 0:
                    raise ValueError
                user_data[user_id]['interval'] = interval
                user_data[user_id]['state'] = 'awaiting_broadcast_message'
                await update.message.reply_text(
                    f"‚è∞ Das Intervall wurde auf {interval} Minuten eingestellt.\n"
                    f"‚úâÔ∏è Jetzt senden Sie bitte die Nachricht f√ºr die Verteilung."
                )
            except ValueError:
                await update.message.reply_text("‚ö†Ô∏è Bitte geben Sie eine positive ganze Zahl ein.")
        elif state == 'awaiting_broadcast_message':
            message_to_forward = update.message
            interval = user_data[user_id]['interval']

            if not registered_chats:
                await update.message.reply_text("üö´ Der Bot ist in keinem Chat hinzugef√ºgt.")
                user_data[user_id]['state'] = None
                return

            job_queue = context.job_queue
            if job_queue is None:
                logging.error("JobQueue –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞.")
                await update.message.reply_text("‚ö†Ô∏è Ein Fehler ist aufgetreten: JobQueue ist nicht initialisiert.")
                return

            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞
            if user_id in scheduled_jobs:
                scheduled_jobs[user_id].schedule_removal()

            job = job_queue.run_repeating(
                send_scheduled_message,
                interval=interval * 60,  # —Å–µ–∫—É–Ω–¥—ã
                first=0,
                data={'message': message_to_forward, 'chats': registered_chats, 'user_id': user_id}
            )
            scheduled_jobs[user_id] = job

            await update.message.reply_text(
                f"üì§ Die Verteilung wurde gestartet. Die Nachricht wird alle {interval} Minuten gesendet."
            )

            user_data[user_id]['state'] = None

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –∫–Ω–æ–ø–∫–∞–º
            await start(update, context)
        else:
            pass
    else:
        pass


async def send_scheduled_message(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    message_to_forward = job_data['message']
    chats = job_data['chats']
    user_id = job_data['user_id']

    from_chat_id = message_to_forward.chat_id
    message_id = message_to_forward.message_id

    for chat_id, chat_title in chats:
        try:
            await context.bot.forward_message(
                chat_id=chat_id,
                from_chat_id=from_chat_id,
                message_id=message_id
            )
            logging.info(f"‚úÖ Nachricht an Chat {chat_title} ({chat_id}) gesendet.")
        except Exception as e:
            logging.error(f"‚ùå Nachricht an Chat {chat_title} ({chat_id}) konnte nicht gesendet werden: {e}")


async def my_chat_member_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    result = update.my_chat_member
    chat = result.chat
    chat_id = chat.id
    chat_title = chat.title or chat.full_name or chat.username or str(chat.id)
    new_status = result.new_chat_member.status
    old_status = result.old_chat_member.status

    logging.info(f"my_chat_member-Update: Chat '{chat_title}' ({chat_id}), "
                 f"alter Status: {old_status}, neuer Status: {new_status}")

    if old_status in ['left', 'kicked'] and new_status in ['member', 'administrator']:
        registered_chats.add((chat_id, chat_title))
        save_registered_chats()
        logging.info(f"‚úÖ Bot wurde dem Chat {chat_title} ({chat_id}) hinzugef√ºgt.")
    elif new_status in ['left', 'kicked']:
        registered_chats.discard((chat_id, chat_title))
        save_registered_chats()
        logging.info(f"‚ùå Bot wurde aus dem Chat {chat_title} ({chat_id}) entfernt.")


def save_registered_chats():
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(list(registered_chats), f, ensure_ascii=False)


def main():
    app = ApplicationBuilder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_command))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(ChatMemberHandler(my_chat_member_handler, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_handler(MessageHandler(filters.ALL & filters.ChatType.PRIVATE & (~filters.COMMAND), receive_message))

    app.run_polling(drop_pending_updates=True)


if __name__ == '__main__':
     main()
